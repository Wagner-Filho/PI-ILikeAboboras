//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controlle.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controlle: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controlle()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controlle"",
    ""maps"": [
        {
            ""name"": ""ControlleP"",
            ""id"": ""de50e486-79b4-4cc8-9a16-37e2b6be623b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""65ac7fe6-1480-44e3-aeb0-98f09b1d4175"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Teclado"",
                    ""id"": ""b7fb2081-9864-47ee-9fdb-64656bdfcc16"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""455a6add-e1e4-4f82-b3a2-4569559eac98"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""82251f94-ffe3-4f7f-acbd-5025abbd9a9e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""25e5f029-fe17-464b-b54b-0bdba3af56cd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""547c8c58-a2cd-4182-afb6-993a0dd22c88"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controle"",
                    ""id"": ""c9b41af5-0d3a-403e-ace9-d898747a0085"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""08a2e45c-513f-4d4c-9599-1c87a9557ec7"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""36dde8de-afa2-488d-8cec-1035355322c3"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bf1d47fe-ff15-4f9e-b785-65d26dfbc219"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b18ecf9-2fe6-41f3-ab32-c947b0285f4e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controles"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controles"",
            ""bindingGroup"": ""Controles"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ControlleP
        m_ControlleP = asset.FindActionMap("ControlleP", throwIfNotFound: true);
        m_ControlleP_Move = m_ControlleP.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControlleP
    private readonly InputActionMap m_ControlleP;
    private List<IControllePActions> m_ControllePActionsCallbackInterfaces = new List<IControllePActions>();
    private readonly InputAction m_ControlleP_Move;
    public struct ControllePActions
    {
        private @Controlle m_Wrapper;
        public ControllePActions(@Controlle wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ControlleP_Move;
        public InputActionMap Get() { return m_Wrapper.m_ControlleP; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllePActions set) { return set.Get(); }
        public void AddCallbacks(IControllePActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllePActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllePActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IControllePActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IControllePActions instance)
        {
            if (m_Wrapper.m_ControllePActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllePActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllePActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllePActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllePActions @ControlleP => new ControllePActions(this);
    private int m_ControlesSchemeIndex = -1;
    public InputControlScheme ControlesScheme
    {
        get
        {
            if (m_ControlesSchemeIndex == -1) m_ControlesSchemeIndex = asset.FindControlSchemeIndex("Controles");
            return asset.controlSchemes[m_ControlesSchemeIndex];
        }
    }
    public interface IControllePActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
